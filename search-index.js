var searchIndex = {};
searchIndex["either"] = {"doc":"The enum [**Either**](enum.Either.html).","items":[[4,"Either","either","`Either` represents an alternative holding one value out of\neither of the two possible values.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,null],[11,"is_right","","Return true if the value is the `Right` variant.",0,null],[11,"left","","Convert the left side of `Either&lt;L, R&gt;` to an `Option&lt;L&gt;`.",0,null],[11,"right","","Convert the right side of `Either&lt;L, R&gt;` to an `Option&lt;R&gt;`.",0,null],[11,"as_ref","","Convert `&amp;Either&lt;L, R&gt;` to `Either&lt;&amp;L, &amp;R&gt;`.",0,null],[11,"as_mut","","Convert `&amp;mut Either&lt;L, R&gt;` to `Either&lt;&amp;mut L, &amp;mut R&gt;`.",0,null],[11,"flip","","Convert `Either&lt;L, R&gt;` to `Either&lt;R, L&gt;`.",0,null],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present.",0,null],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present.",0,null],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is\n`Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second\nfunction `g` is applied.",0,null],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"read","","",0,null],[11,"read_to_end","","",0,null],[11,"fill_buf","","",0,null],[11,"consume","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"fmt","","",0,null],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early\nwith the opposite side. Can only be used in functions that return\n`Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
initSearch(searchIndex);
